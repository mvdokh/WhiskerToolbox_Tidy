// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: line_data.capnp

#include "line_data.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<47> b_c97c3ce98e4f052f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     47,   5,  79, 142, 233,  60, 124, 201,
     16,   0,   0,   0,   1,   0,   1,   0,
     72, 113,  13,  70,  51,  72, 187, 190,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108, 105, 110, 101,  95, 100,  97, 116,
     97,  46,  99,  97, 112, 110, 112,  58,
     80, 111, 105, 110, 116,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    120,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    121,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c97c3ce98e4f052f = b_c97c3ce98e4f052f.words;
#if !CAPNP_LITE
static const uint16_t m_c97c3ce98e4f052f[] = {0, 1};
static const uint16_t i_c97c3ce98e4f052f[] = {0, 1};
const ::capnp::_::RawSchema s_c97c3ce98e4f052f = {
  0xc97c3ce98e4f052f, b_c97c3ce98e4f052f.words, 47, nullptr, m_c97c3ce98e4f052f,
  0, 2, i_c97c3ce98e4f052f, nullptr, nullptr, { &s_c97c3ce98e4f052f, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_cee3dc5b25bf3377 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    119,  51, 191,  37,  91, 220, 227, 206,
     16,   0,   0,   0,   1,   0,   0,   0,
     72, 113,  13,  70,  51,  72, 187, 190,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108, 105, 110, 101,  95, 100,  97, 116,
     97,  46,  99,  97, 112, 110, 112,  58,
     76, 105, 110, 101,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
    112, 111, 105, 110, 116, 115,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     47,   5,  79, 142, 233,  60, 124, 201,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cee3dc5b25bf3377 = b_cee3dc5b25bf3377.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cee3dc5b25bf3377[] = {
  &s_c97c3ce98e4f052f,
};
static const uint16_t m_cee3dc5b25bf3377[] = {0};
static const uint16_t i_cee3dc5b25bf3377[] = {0};
const ::capnp::_::RawSchema s_cee3dc5b25bf3377 = {
  0xcee3dc5b25bf3377, b_cee3dc5b25bf3377.words, 36, d_cee3dc5b25bf3377, m_cee3dc5b25bf3377,
  1, 1, i_cee3dc5b25bf3377, nullptr, nullptr, { &s_cee3dc5b25bf3377, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<52> b_924d6aa056e93bf3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    243,  59, 233,  86, 160, 106,  77, 146,
     16,   0,   0,   0,   1,   0,   1,   0,
     72, 113,  13,  70,  51,  72, 187, 190,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 202,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108, 105, 110, 101,  95, 100,  97, 116,
     97,  46,  99,  97, 112, 110, 112,  58,
     84, 105, 109, 101,  76, 105, 110, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     68,   0,   0,   0,   2,   0,   1,   0,
    116, 105, 109, 101,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108, 105, 110, 101, 115,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    119,  51, 191,  37,  91, 220, 227, 206,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_924d6aa056e93bf3 = b_924d6aa056e93bf3.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_924d6aa056e93bf3[] = {
  &s_cee3dc5b25bf3377,
};
static const uint16_t m_924d6aa056e93bf3[] = {1, 0};
static const uint16_t i_924d6aa056e93bf3[] = {0, 1};
const ::capnp::_::RawSchema s_924d6aa056e93bf3 = {
  0x924d6aa056e93bf3, b_924d6aa056e93bf3.words, 52, d_924d6aa056e93bf3, m_924d6aa056e93bf3,
  1, 2, i_924d6aa056e93bf3, nullptr, nullptr, { &s_924d6aa056e93bf3, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<70> b_9775156d67f83199 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    153,  49, 248, 103, 109,  21, 117, 151,
     16,   0,   0,   0,   1,   0,   1,   0,
     72, 113,  13,  70,  51,  72, 187, 190,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108, 105, 110, 101,  95, 100,  97, 116,
     97,  46,  99,  97, 112, 110, 112,  58,
     76, 105, 110, 101,  68,  97, 116,  97,
     80, 114, 111, 116, 111,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     96,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     93,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
    116, 105, 109, 101,  76, 105, 110, 101,
    115,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    243,  59, 233,  86, 160, 106,  77, 146,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 109,  97, 103, 101,  87, 105, 100,
    116, 104,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 109,  97, 103, 101,  72, 101, 105,
    103, 104, 116,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9775156d67f83199 = b_9775156d67f83199.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9775156d67f83199[] = {
  &s_924d6aa056e93bf3,
};
static const uint16_t m_9775156d67f83199[] = {2, 1, 0};
static const uint16_t i_9775156d67f83199[] = {0, 1, 2};
const ::capnp::_::RawSchema s_9775156d67f83199 = {
  0x9775156d67f83199, b_9775156d67f83199.words, 70, d_9775156d67f83199, m_9775156d67f83199,
  1, 3, i_9775156d67f83199, nullptr, nullptr, { &s_9775156d67f83199, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


// Point
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Point::_capnpPrivate::dataWordSize;
constexpr uint16_t Point::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Point::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Point::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Line
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Line::_capnpPrivate::dataWordSize;
constexpr uint16_t Line::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Line::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Line::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// TimeLine
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t TimeLine::_capnpPrivate::dataWordSize;
constexpr uint16_t TimeLine::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind TimeLine::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TimeLine::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// LineDataProto
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t LineDataProto::_capnpPrivate::dataWordSize;
constexpr uint16_t LineDataProto::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind LineDataProto::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* LineDataProto::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE



