name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      matrix:
        include:
          - {"os": ubuntu-latest,
             short: linux,
             compiler: gcc,
             shell: bash,
             appfolder: out/install/GCC/Release}
          - {"os": ubuntu-latest,
             short: linux,
             compiler: clang,
             shell: bash,
             appfolder: out/install/Clang/Release}
          #- {"os": windows-latest, short: windows, compiler: gcc, shell: msys2}
          #- {"os": windows-latest, short: windows, compiler: clang, shell: msys2}
          - {"os": windows-latest,
             short: windows,
             compiler: msvc,
             shell: powershell,
             appfolder: out/install/MSVC/Release}
          - {"os": macos-latest,
             short: mac-arm64,
             compiler: clang,
             shell: bash,
             appfolder: out/install/Clang/Release}

    runs-on: ${{matrix.os}}

    env:
      VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

    defaults:
      run:
        shell: '${{ matrix.shell }} {0}'

    steps:
      - uses: actions/checkout@v3

      - uses: seanmiddleditch/gha-setup-ninja@master

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        if: runner.os == 'macOS'
        with:
          vcpkgGitCommitId: 'f7423ee180c4b7f40d43402c2feb3859161ef625'

      - name: Set up Homebrew
        id: set-up-homebrew
        if: runner.os == 'macOS'
        uses: Homebrew/actions/setup-homebrew@master

      - uses: ilammy/msvc-dev-cmd@v1
        if: runner.os == 'Windows' && matrix.compiler == 'msvc'

      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Add clang and and gcc to windows runner
        uses: msys2/setup-msys2@v2
        if: runner.os == 'Windows' && matrix.shell == 'msys2'
        with:
          update: true
          install: >-
            base-devel
            mingw-w64-x86_64-clang
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-openmp

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: 6.7.2
          cache: true

      - name: Set QTDIR and QtToolsPath
        shell: bash
        run: |
          echo "QTDIR=$QT_ROOT_DIR" >> "$GITHUB_ENV"
          echo "QtToolsPath=$QT_ROOT_DIR/bin" >> "$GITHUB_ENV"

      - name: "Set environmental variables"
        if: runner.os == 'Linux' || runner.os == 'Windows'
        shell: bash
        run: |
          echo "VCPKG_ROOT=$VCPKG_INSTALLATION_ROOT" >> $GITHUB_ENV

      - name: Install nasm and other libraries on Linux
        if: runner.os == 'Linux'
        run: sudo apt-get install -y nasm libxi-dev libxtst-dev libxrandr-dev libomp-14-dev

      - name: Setup headless display
        uses: pyvista/setup-headless-display-action@v2

      - name: Install nasm on Mac
        if: runner.os == 'macOS'
        run: | 
          brew install nasm libomp
          echo "OpenMP_ROOT=$(brew --prefix libomp)" >> $GITHUB_ENV

      - name: Install jinja2
        if: runner.os == 'Linux'
        run: pip install jinja2

      - name: Configure CMake
        run: cmake --preset ${{matrix.short}}-${{matrix.compiler}}-release

      #- name: Print error messages from build
      #  if: runner.os == 'Linux' && failure()
      #  run: cat   /usr/local/share/vcpkg/buildtrees/gtk3/config-x64-linux-dynamic-dbg-out.log

      - name: Build
        run: cmake --build --preset ${{matrix.short}}-${{matrix.compiler}}-release

      - name: Install
        run: cmake --build --preset ${{matrix.short}}-${{matrix.compiler}}-release --target install

      - name: Package with cpack
        run: |
            pushd ${{matrix.appfolder}}
            if [ "${{ runner.os }}" = "Windows" ]; then
              cpack -G ZIP
            elif [ "${{ runner.os }}" = "macOS" ]; then
              cpack -G DragNDrop
            else
              cpack -G TGZ
            fi
            popd